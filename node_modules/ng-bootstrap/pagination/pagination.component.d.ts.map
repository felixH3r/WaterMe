{"version":3,"file":"pagination.component.d.ts","sources":["pagination.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnInit, Renderer } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { PaginationConfig } from './pagination.config';\nexport interface PageChangedEvent {\n    itemsPerPage: number;\n    page: number;\n}\nexport declare const PAGINATION_CONTROL_VALUE_ACCESSOR: any;\nexport declare class PaginationComponent implements ControlValueAccessor, OnInit {\n    config: any;\n    /** if `true` aligns each link to the sides of pager */\n    align: boolean;\n    /** limit number for page links in pager */\n    maxSize: number;\n    /** if false first and last buttons will be hidden */\n    boundaryLinks: boolean;\n    /** if false previous and next buttons will be hidden */\n    directionLinks: boolean;\n    /** first button text */\n    firstText: string;\n    /** previous button text */\n    previousText: string;\n    /** next button text */\n    nextText: string;\n    /** last button text */\n    lastText: string;\n    /** if true current page will in the middle of pages list */\n    rotate: boolean;\n    /** add class to <li> */\n    pageBtnClass: string;\n    /** if true pagination component will be disabled */\n    disabled: boolean;\n    /** fired when total pages count changes, $event:number equals to total pages count */\n    numPages: EventEmitter<number>;\n    /** fired when page was changed, $event:{page, itemsPerPage} equals to object with current page index and number of items per page */\n    pageChanged: EventEmitter<PageChangedEvent>;\n    /** maximum number of items per page. If value less than 1 will display all items on one page */\n    itemsPerPage: number;\n    /** total number of items in all pages */\n    totalItems: number;\n    totalPages: number;\n    page: number;\n    onChange: any;\n    onTouched: any;\n    renderer: Renderer;\n    elementRef: ElementRef;\n    classMap: string;\n    pages: any[];\n    protected _itemsPerPage: number;\n    protected _totalItems: number;\n    protected _totalPages: number;\n    protected inited: boolean;\n    protected _page: number;\n    constructor(renderer: Renderer, elementRef: ElementRef, paginationConfig: PaginationConfig);\n    configureOptions(config: any): void;\n    ngOnInit(): void;\n    writeValue(value: number): void;\n    getText(key: string): string;\n    noPrevious(): boolean;\n    noNext(): boolean;\n    registerOnChange(fn: (_: any) => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    selectPage(page: number, event?: Event): void;\n    protected makePage(num: number, text: string, active: boolean): {\n        number: number;\n        text: string;\n        active: boolean;\n    };\n    protected getPages(currentPage: number, totalPages: number): any[];\n    protected calculateTotalPages(): number;\n}\n"]}