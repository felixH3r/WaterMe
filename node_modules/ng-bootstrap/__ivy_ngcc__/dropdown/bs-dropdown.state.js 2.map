{"version":3,"file":"bs-dropdown.state.js","sources":["../../src/dropdown/bs-dropdown.state.ts"],"names":[],"mappings":"OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,eAAe;;AAIxD;AACa,IAYX;AACW,QAdb,iBAwBC;AACD,QAxBE,cAAS,GAAkB,MAAM,CAAC;AACpC,QACE,iBAAY,GAAG,IAAI,YAAY,EAAW,CAAC;AAC7C,QAAE,qBAAgB,GAAG,IAAI,YAAY,EAAW,CAAC;AACjD,QAAE,gBAAW,GAAG,IAAI,YAAY,EAAW,CAAC;AAC5C,QAQI,IAAI,CAAC,YAAY,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO;AAAI,YAC1C,KAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC;AACzC,QAAI,CAAC,CAAC,CAAC;AACP,IAAE,CAAC,AAGD;IAFK,JAGP,IAAA,kBAAkB;OAHD,GAA0B,UAC3C,EAAE,IAAI,EAAE,UAAU,EAAE,OACnB,/CAED,IAAO,8BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F;;;;;gDAAC;AACF,IAAA,sBAAC;AAAD,CAAC,AAxBD,IAwBC;AACD","sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\nimport { BsComponentRef } from '../component-loader/bs-component-ref.class';\n\n\nexport class BsDropdownState {\n  direction: 'down' | 'up' = 'down';\n  autoClose: boolean;\n  isOpenChange = new EventEmitter<boolean>();\n  isDisabledChange = new EventEmitter<boolean>();\n  toggleClick = new EventEmitter<boolean>();\n\n  /**\n   * Content to be displayed as popover.\n   */\n  dropdownMenu: Promise<BsComponentRef<any>>;\n  resolveDropdownMenu: (componentRef: BsComponentRef<any>) => void;\n\n  constructor() {\n    this.dropdownMenu = new Promise((resolve) => {\n      this.resolveDropdownMenu = resolve;\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}