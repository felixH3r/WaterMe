{"version":3,"file":"modal-backdrop.component.js","sources":["../../src/modal/modal-backdrop.component.ts"],"names":[],"mappings":"OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe;AAC/D,OACO,EAAE,SAAS,EAAE,MAAM,uBAAuB;AACjD,OAAO,EAAE,KAAK,EAAE,MAAM,+BAA+B;;AAErD;AACa,IAEX,8BAAmB,OAA4B;AACjD,QAHS,YAAO,GAAW,IAAI,CAAC;AAChC,QAEI,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACjC,IAAE,CAAC;AACH,IAAA,2BAAC;AAAD,CAAC,AAND,IAMC;AAED,8EAA8E;AAE9E;AACa,IA2BX,gCAAmB,OAAkB,EAAE,QAAiB;AAC1D,QAHY,aAAQ,GAAW,KAAK,CAAC;AACrC,QAEI,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AAC3B,QAAI,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC7B,IAAE,CAAC;AACH,IA/BE,sBAAW,8CAAU;AAAI,aAAzB;AAAc,YACZ,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;AAC5B,QAAE,CAAC;AAEH,aAAE,UAAsB,KAAa;AACrC,YAAI,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;AAC7B,YAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,KAAG,SAAS,CAAC,IAAM,EAAE,KAAK,CAAC,CAAC;AAC1F,QAAE,CAAC;AAEH;AAA0B;AACN,OARjB;AACH,IAME,sBAAW,2CAAO;AAAI,aAAtB;AAAc,YACZ,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;AACzB,QAAE,CAAC;AAEH,aAAE,UAAmB,KAAa;AAClC,YAAI,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AAC1B,YAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,KAAG,SAAS,CAAC,EAAI,EAAE,KAAK,CAAC,CAAC;AACxF,YAAI,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AACnB,gBAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,KAAG,SAAS,CAAC,IAAM,EAAE,KAAK,CAAC,CAAC;AAC5F,YAAI,CAAC;AACL,QAAE,CAAC;AAEH;AAA0B;AACF,OAXrB,AA2BD;IAPK,JAQP,IAAA,kBAAkB;cARD,GAA0B,UAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,rDAQ1B,IAAO,qCAAc,GAAmE,cAAM,OAAA;QAP5F,QAAQ,EAAE,lBAQZ,QAAA,EAAC,IAAI,EAAE,UAAU,GAAG;MARW,sBAC7B,5BAQF,QAAA,EAAC,IAAI,EAAE,QAAQ,GAAG;OARR,EAAE,TASZ,KAAC,EAH6F,CAG7F;CATa,sBACZ,2BAA2B,qBAC3B,IAAI,EAAE,EAAC,OAAO,EAAE,SAAS,CAAC,QAAQ,EAAC,kBACpC,EAAG,EAAE,OACL;;;;;;;;;;+FAKC;AACF,IAAA,6BAAC;AAAD,CAAC,AA7CD,IA6CC;AACD","sourcesContent":["import { Component, ElementRef, Renderer } from '@angular/core';\n\nimport { ClassName } from './modal-options.class';\nimport { isBs3 } from '../utils/ng2-bootstrap-config';\n\nexport class ModalBackdropOptions {\n  public animate:boolean = true;\n\n  public constructor(options:ModalBackdropOptions) {\n    Object.assign(this, options);\n  }\n}\n\n/** This component will be added as background layout for modals if enabled */\n\nexport class ModalBackdropComponent {\n  public get isAnimated():boolean {\n    return this._isAnimated;\n  }\n\n  public set isAnimated(value:boolean) {\n    this._isAnimated = value;\n    this.renderer.setElementClass(this.element.nativeElement, `${ClassName.FADE}`, value);\n  }\n\n  public get isShown():boolean {\n    return this._isShown;\n  }\n\n  public set isShown(value:boolean) {\n    this._isShown = value;\n    this.renderer.setElementClass(this.element.nativeElement, `${ClassName.IN}`, value);\n    if (!isBs3()) {\n      this.renderer.setElementClass(this.element.nativeElement, `${ClassName.SHOW}`, value);\n    }\n  }\n\n  public element:ElementRef;\n  public renderer:Renderer;\n\n  protected _isAnimated:boolean;\n  protected _isShown:boolean = false;\n\n  public constructor(element:ElementRef, renderer:Renderer) {\n    this.element = element;\n    this.renderer = renderer;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'bs-modal-backdrop',\n  template: '',\n  // tslint:disable-next-line\n  host: {'class': ClassName.BACKDROP}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}