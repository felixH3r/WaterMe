{"version":3,"file":"progress.directive.js","sources":["../../src/progressbar/progress.directive.ts"],"names":[],"mappings":"OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,eAAe;AAI7D,qDAAqD;AACrD,iDAAiD;;AAEjD;AACY,IADZ;AAA+B,QAkBrB,aAAQ,GAAW,IAAI,CAAC;AAClC,QACS,SAAI,GAAS,EAAE,CAAC;AACzB,QACY,SAAI,GAAU,GAAG,CAAC;AAC9B,IAsBA,CAAC;AACD,IAvCE,sBAAW,kCAAG;AAAI,QAHlB,8CAA8C;AAChD,aAEE;AAAc,YACZ,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;AACrB,QAAE,CAAC;AAEH,aAAE,UAAe,CAAQ;AACzB,YAAI,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AAClB,YAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,GAAgB;AAAI,gBACrC,GAAG,CAAC,qBAAqB,EAAE,CAAC;AAClC,YAAI,CAAC,CAAC,CAAC;AACP,QAAE,CAAC;AAEH;AAA0B;AAET,OAXd;AACH,IAcS,kCAAM,GAAb,UAAc,GAAgB;AAAI,QAChC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;AACxB,YAAM,GAAG,CAAC,UAAU,GAAG,MAAM,CAAC;AAC9B,QAAI,CAAC;AACL,QAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACxB,IAAE,CAAC;AAEH,IAAS,qCAAS,GAAhB,UAAiB,GAAgB;AAAI,QACnC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AAChD,IAAE,CAAC,CAGD;IAFK,JAGP,IAAA,kBAAkB;SAHD,GAA0B,UAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,5DAGrC,IAAO,gCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;kBAJ4D,EAAC,EAAG,EAAE,OACnE,/BAID,IAAO,gCAAc,GAA2C;AAChE,QAAA,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;AAC7B,QAAA,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,UAAU,EAAG,EAAE,EAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;AACrE,QAAA,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAG,EAAE,EAAE;AAChE,KAAC;;;;;;;;;;;;;;;;;;;oBAAC;AACF,IAAA,wBAAC;AAAD,CAAC,AA7CD,IA6CC;AACD","sourcesContent":["import { Directive, HostBinding, Input } from '@angular/core';\n\nimport { BarComponent } from './bar.component';\n\n// todo: progress element conflict with bootstrap.css\n// todo: need hack: replace host element with div\n\nexport class ProgressDirective  {\n  /** if `true` changing value of progress bar will be animated (note: not supported by Bootstrap 4) */\n   public animate:boolean;\n\n  /** maximum total value of progress element */\n  \n  \n  public get max():number {\n    return this._max;\n  }\n\n  public set max(v:number) {\n    this._max = v;\n    this.bars.forEach((bar:BarComponent) => {\n      bar.recalculatePercentage();\n    });\n  }\n\n   public addClass:boolean = true;\n\n  public bars:any[] = [];\n\n  protected _max:number = 100;\n\n  public addBar(bar:BarComponent):void {\n    if (!this.animate) {\n      bar.transition = 'none';\n    }\n    this.bars.push(bar);\n  }\n\n  public removeBar(bar:BarComponent):void {\n    this.bars.splice(this.bars.indexOf(bar), 1);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'bs-progress, [progress]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'animate': [{ type: Input },],\n'max': [{ type: HostBinding, args: ['attr.max', ] },{ type: Input },],\n'addClass': [{ type: HostBinding, args: ['class.progress', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}