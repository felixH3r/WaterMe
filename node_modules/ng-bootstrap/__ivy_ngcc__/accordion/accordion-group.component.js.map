{"version":3,"file":"accordion-group.component.js","sources":["../../src/accordion/accordion-group.component.ts"],"names":[],"mappings":"OAAO,EACL,SAAS,EAAE,WAAW,EAAE,MAAM,EAAE,KAAK,EACtC,MAAM,eAAe;AACtB,OAAO,EAAE,KAAK,EAAE,MAAM,+BAA+B;AACrD,OAAO,EAAE,kBAAkB,EAAE,MAAM,uBAAuB;AAE1D;AACA;AACA;AACA;AACA;AACA,KAAK;;;;;;;;;;;;;;;;;;;AAGL;AAAoD,IA8BlD,iCAAoB,SAA6B;AACnD,QAAI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC/B,IAAE,CAAC;AACH,IArBE,sBAAW,2CAAM;AAAI,QAJrB,wEAAwE;AAC1E,QAAE,wCAAwC;AAC1C,aAEE;AAAc,YACZ,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;AACxB,QAAE,CAAC;AAEH,aAAE,UAAkB,KAAc;AAClC,YAAI,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AACzB,YAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AAChB,gBAAM,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;AAC5C,YAAI,CAAC;AACL,QAAE,CAAC;AAEH;AAA0B;AAEzB,OAXE;AACH,IAQE,sBAAW,0CAAK;AAAI,aAApB;AAAc,YACZ,MAAM,CAAC,KAAK,EAAE,CAAC;AACnB,QAAE,CAAC;AAEH;AAA0B;AACH,OAHpB;AACH,IAQS,0CAAQ,GAAf;AAAc,QACZ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,IAAI,eAAe,CAAC;AACzD,QAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AAClC,IAAE,CAAC;AAEH,IAAS,6CAAW,GAAlB;AAAc,QACZ,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACrC,IAAE,CAAC;AAEH,IAAS,4CAAU,GAAjB,UAAkB,KAAY;AAAI,QAChC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;AAC3B,YAAM,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;AACjC,QAAI,CAAC;AACL,IAAE,CAAC,CAsBD;IArBK,JAsBP,IAAA,kBAAkB;eAtBD,GAA0B,UAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,tDAsB1B,IAAO,sCAAc,GAAmE,cAAM,OAAA;QArB5F,QAAQ,EAAE,kCAAkC,sBAC5C,QAAQ,EAAE,pFAqBZ,QAAA,EAAC,IAAI,EAAE,kBAAkB,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,kBAAkB,EAAG,EAAE,EAAG,EAAC;AAC1F,KAAC,EAF6F,CAE7F,CAAC;AACF,IAAO,sCAAc,GAA2C;AAChE,QAAA,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;AAC7B,QAAA,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;AAChC,QAAA,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;AAChC,QAAA,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,kBAAkB,EAAG,EAAE,EAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;AAChF,KAAC;;wMAZE,kBACF,EAAG,EAAE,OACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAUC;AACF,IAAA,8BAAC;AAAD,CAAC,AAhFD,IAgFC;AACD","sourcesContent":["import {\n  Component, HostBinding, Inject, Input, OnDestroy, OnInit\n} from '@angular/core';\nimport { isBs3 } from '../utils/ng2-bootstrap-config';\nimport { AccordionComponent } from './accordion.component';\n\n/*\n * ### Accordion heading\n\n Instead of using `heading` attribute on the `accordion-group`, you can use an `accordion-heading` attribute on `any` element inside of a group that will be used as group's header template.\n\n * */\n\n\nexport class AccordionPanelComponent implements OnInit, OnDestroy {\n  /** Clickable text in accordion's group header, check `accordion heading` below for using html in header */\n   public heading: string;\n  /** Provides an ability to use Bootstrap's contextual panel classes (`panel-primary`, `panel-success`, `panel-info`, etc...). List of all available classes [available here](http://getbootstrap.com/components/#panels-alternatives) */\n   public panelClass: string;\n  /** if <code>true</code> â€” disables accordion group */\n   public isDisabled: boolean;\n\n  // Questionable, maybe .panel-open should be on child div.panel element?\n  /** Is accordion group open or closed */\n  \n  \n  public get isOpen(): boolean {\n    return this._isOpen;\n  }\n\n  public set isOpen(value: boolean) {\n    this._isOpen = value;\n    if (value) {\n      this.accordion.closeOtherPanels(this);\n    }\n  }\n\n  public get isBs3(): boolean {\n    return isBs3();\n  }\n\n  protected _isOpen: boolean;\n  protected accordion: AccordionComponent;\n\n  public constructor( accordion: AccordionComponent) {\n    this.accordion = accordion;\n  }\n\n  public ngOnInit(): any {\n    this.panelClass = this.panelClass || 'panel-default';\n    this.accordion.addGroup(this);\n  }\n\n  public ngOnDestroy(): any {\n    this.accordion.removeGroup(this);\n  }\n\n  public toggleOpen(event: Event): any {\n    if (!this.isDisabled) {\n      this.isOpen = !this.isOpen;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'accordion-group, accordion-panel',\n  template: `\n<div class=\"panel card\" [ngClass]=\"panelClass\">\n  <div class=\"panel-heading card-header\" role=\"tab\" (click)=\"toggleOpen($event)\">\n    <div class=\"panel-title card-title\">\n      <div role=\"button\" class=\"accordion-toggle\" [attr.aria-expanded]=\"isOpen\">\n        <div *ngIf=\"heading\"[ngClass]=\"{'text-muted': isDisabled}\">{{heading}}</div>\n        <ng-content select=\"[accordion-heading]\"></ng-content>\n      </div>\n    </div>\n  </div>\n  <div class=\"panel-collapse collapse\" role=\"tabpanel\" [collapse]=\"!isOpen\">\n    <div class=\"panel-body card-block\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n  `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AccordionComponent, decorators: [{ type: Inject, args: [AccordionComponent, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'heading': [{ type: Input },],\n'panelClass': [{ type: Input },],\n'isDisabled': [{ type: Input },],\n'isOpen': [{ type: HostBinding, args: ['class.panel-open', ] },{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}