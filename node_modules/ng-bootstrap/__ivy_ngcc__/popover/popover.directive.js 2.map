{"version":3,"file":"popover.directive.js","sources":["../../src/popover/popover.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive, Input, Output, EventEmitter, OnInit, OnDestroy, Renderer,\n  ElementRef, TemplateRef, ViewContainerRef\n} from '@angular/core';\nimport { PopoverConfig } from './popover.config';\nimport { ComponentLoaderFactory, ComponentLoader } from '../component-loader';\nimport { PopoverContainerComponent } from './popover-container.component';\n\n/**\n * A lightweight, extensible directive for fancy popover creation.\n */\n\nexport class PopoverDirective implements OnInit, OnDestroy {\n  /**\n   * Content to be displayed as popover.\n   */\n   public popover: string | TemplateRef<any>;\n  /**\n   * Title of a popover.\n   */\n   public popoverTitle: string;\n  /**\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n   */\n   public placement: 'top' | 'bottom' | 'left' | 'right';\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   */\n   public triggers: string;\n  /**\n   * A selector specifying the element the popover should be appended to.\n   * Currently only supports \"body\".\n   */\n   public container: string;\n\n  /**\n   * Returns whether or not the popover is currently being shown\n   */\n  \n  public get isOpen(): boolean { return this._popover.isShown; }\n\n  public set isOpen(value: boolean) {\n    if (value) {this.show();} else {this.hide();}\n  }\n\n  /**\n   * Emits an event when the popover is shown\n   */\n   public onShown: EventEmitter<any>;\n  /**\n   * Emits an event when the popover is hidden\n   */\n   public onHidden: EventEmitter<any>;\n\n  private _popover: ComponentLoader<PopoverContainerComponent>;\n\n  public constructor(_elementRef: ElementRef,\n                     _renderer: Renderer,\n                     _viewContainerRef: ViewContainerRef,\n                     _config: PopoverConfig,\n                     cis: ComponentLoaderFactory) {\n    this._popover = cis\n      .createLoader<PopoverContainerComponent>(_elementRef, _viewContainerRef, _renderer)\n      .provide({provide: PopoverConfig, useValue: _config});\n    Object.assign(this, _config);\n    this.onShown = this._popover.onShown;\n    this.onHidden = this._popover.onHidden;\n  }\n\n  /**\n   * Opens an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  public show(): void {\n    if (this._popover.isShown) {\n      return;\n    }\n\n    this._popover\n      .attach(PopoverContainerComponent)\n      .to(this.container)\n      .position({attachment: this.placement})\n      .show({\n        content: this.popover,\n        placement: this.placement,\n        title: this.popoverTitle\n      });\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  public hide(): void {\n    if (this.isOpen) {\n      this._popover.hide();\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  public toggle(): void {\n    if (this.isOpen) {\n      return this.hide();\n    }\n\n    this.show();\n  }\n\n  public ngOnInit(): any {\n    this._popover.listen({\n      triggers: this.triggers,\n      show: () => this.show()\n    });\n  }\n\n  public ngOnDestroy(): any {\n    this._popover.dispose();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[popover]', exportAs: 'bs-popover'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: ViewContainerRef, },\n{type: PopoverConfig, },\n{type: ComponentLoaderFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'popover': [{ type: Input },],\n'popoverTitle': [{ type: Input },],\n'placement': [{ type: Input },],\n'triggers': [{ type: Input },],\n'container': [{ type: Input },],\n'isOpen': [{ type: Input },],\n'onShown': [{ type: Output },],\n'onHidden': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}