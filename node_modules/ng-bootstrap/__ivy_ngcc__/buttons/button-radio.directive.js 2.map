{"version":3,"file":"button-radio.directive.js","sources":["../../src/buttons/button-radio.directive.ts"],"names":[],"mappings":"OAAO,EACH,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,YAAY,EAAE,KAAK,EACtE,MAAM,eAAe;AACtB,OAAO,EAAwB,iBAAiB,EAAE,MAAM,gBAAgB;;AAExE,OAAO,IAAM,4BAA4B,GAAQ;AACjD,IAAI,OAAO,EAAE,iBAAiB;AAC9B,IAAI,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,oBAAoB,EAApB,CAAoB,CAAC;AACvD,IAAI,KAAK,EAAE,IAAI;AACf,CAAC,CAAC;AAEF;AACA;AACA;AACA,GAAG;AAEH;AAAiD,IAmC7C,8BAAmB,EAAc;AACrC,QAlCW,aAAQ,GAAO,QAAQ,CAAC,SAAS,CAAC;AAC7C,QAAW,cAAS,GAAO,QAAQ,CAAC,SAAS,CAAC;AAC9C,QAgCM,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;AACnB,IAAI,CAAC;AACL,IAvBI,sBAAW,0CAAQ;AAAI,aAAvB;AAAc,YACV,MAAM,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK,CAAC;AAC5C,QAAI,CAAC;AAEL;AACqB;AACF,OAJd;AACL,IAEW,sCAAO,GAAd;AAAc,QACV,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACxD,YAAY,MAAM,CAAC;AACnB,QAAQ,CAAC;AACT,QACQ,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AAC/D,YAAY,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;AACnC,QAAQ,CAAC;AAAC,QAAA,IAAI,CAAC,CAAC;AAChB,YAAY,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;AACvC,QAAQ,CAAC;AACT,QACQ,IAAI,CAAC,SAAS,EAAE,CAAC;AACzB,QAAQ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAClC,IAAI,CAAC;AAEL,IAIW,uCAAQ,GAAf;AAAc,QACV,IAAI,CAAC,WAAW,GAAG,OAAO,IAAI,CAAC,WAAW,KAAK,WAAW,CAAC;AACnE,IAAI,CAAC;AAEL,IAAW,qCAAM,GAAb;AAAc,QACV,IAAI,CAAC,SAAS,EAAE,CAAC;AACzB,IAAI,CAAC;AAEL,IAAI,uBAAuB;AAC3B,IAAI,gBAAgB;AACpB,IAAW,yCAAU,GAAjB,UAAkB,KAAU;AAAI,QAC5B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AAC3B,IAAI,CAAC;AAEL,IAAW,+CAAgB,GAAvB,UAAwB,EAAO;AAAI,QAC/B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AAC3B,IAAI,CAAC;AAEL,IAAW,gDAAiB,GAAxB,UAAyB,EAAO;AAAI,QAChC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AAC5B,IAAI,CAAC,CAGH;IAFK,JAGP,IAAA,kBAAkB;YAHD,GAA0B,UAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,/DAGtC,IAAO,mCAAc,GAAmE,cAAM,OAAA;UAH5C,EAAE,SAAS,EAAE,CAAC,xBAIhE,QAAA,EAAC,IAAI,EAAE,UAAU,GAAG;AACpB,KAAC,EAF6F,CAE7F,CAAC;WAL0F,CAAC,EAAE,EAAG,EAAE,OACnG,zBAKD,IAAO,mCAAc,GAA2C;AAChE,QAAA,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;AAC9B,QAAA,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;AACjC,QAAA,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;AAC3B,QAAA,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,cAAc,EAAG,EAAE,EAAE;AAC9D,QAAA,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,OAAO,EAAG,EAAE,EAAE;AACvD,KAAC;;;;;;;;;;;;;;;;;;;;;;oBAAC;AACF,IAAA,2BAAC;AAAD,CAAC,AA1ED,IA0EC;AACD","sourcesContent":["import {\n    Directive, ElementRef, HostBinding, forwardRef, HostListener, Input, OnInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ButtonRadioDirective),\n    multi: true\n};\n\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n\nexport class ButtonRadioDirective implements ControlValueAccessor, OnInit {\n\n    public onChange:any = Function.prototype;\n    public onTouched:any = Function.prototype;\n\n    /** Radio button value, will be set to `ngModel` */\n     public btnRadio:any;\n    /** If `true` â€” radio button can be unchecked */\n     public uncheckable:boolean;\n    /** Current value of radio component or group */\n     public value:any;\n\n    protected el: ElementRef;\n\n    \n    public get isActive(): boolean {\n        return this.btnRadio === this.value;\n    }\n\n    \n    public onClick(): void {\n        if (this.el.nativeElement.attributes.disabled) {\n            return;\n        }\n\n        if (this.uncheckable && this.btnRadio === this.value) {\n            this.value = undefined;\n        } else {\n            this.value = this.btnRadio;\n        }\n\n        this.onTouched();\n        this.onChange(this.value);\n    }\n\n    public constructor(el: ElementRef) {\n      this.el = el;\n    }\n\n    public ngOnInit(): void {\n        this.uncheckable = typeof this.uncheckable !== 'undefined';\n    }\n\n    public onBlur(): void {\n        this.onTouched();\n    }\n\n    // ControlValueAccessor\n    // model -> view\n    public writeValue(value: any): void {\n        this.value = value;\n    }\n\n    public registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    public registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{ selector: '[btnRadio]', providers: [RADIO_CONTROL_VALUE_ACCESSOR] }, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'btnRadio': [{ type: Input },],\n'uncheckable': [{ type: Input },],\n'value': [{ type: Input },],\n'isActive': [{ type: HostBinding, args: ['class.active', ] },],\n'onClick': [{ type: HostListener, args: ['click', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}