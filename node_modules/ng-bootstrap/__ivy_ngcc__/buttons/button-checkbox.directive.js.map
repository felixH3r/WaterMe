{"version":3,"file":"button-checkbox.directive.js","sources":["../../src/buttons/button-checkbox.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, HostBinding, HostListener, Input, OnInit, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n// TODO: config: activeClass - Class to apply to the checked buttons\n\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\n  multi: true\n};\n\n/**\n * Add checkbox functionality to any element\n */\n\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\n  /** Truthy value, will be set to ngModel */\n   public btnCheckboxTrue: any = true;\n  /** Falsy value, will be set to ngModel */\n   public btnCheckboxFalse: any = false;\n\n   public state: boolean = false;\n\n  protected value: any;\n  protected isDisabled: boolean;\n\n  protected onChange: any = Function.prototype;\n  protected onTouched: any = Function.prototype;\n\n  // view -> model\n  \n  public onClick(): void {\n    if (this.isDisabled) {\n      return;\n    }\n\n    this.toggle(!this.state);\n    this.onChange(this.value);\n  }\n\n  public ngOnInit(): any {\n    this.toggle(this.trueValue === this.value);\n  }\n\n  protected get trueValue(): boolean {\n    return typeof this.btnCheckboxTrue !== 'undefined'\n      ? this.btnCheckboxTrue\n      : true;\n  }\n\n  protected get falseValue(): boolean {\n    return typeof this.btnCheckboxFalse !== 'undefined'\n      ? this.btnCheckboxFalse\n      : false;\n  }\n\n  public toggle(state: boolean): void {\n    this.state = state;\n    this.value = this.state ? this.trueValue : this.falseValue;\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  public writeValue(value: any): void {\n    this.state = this.trueValue === value;\n    this.value = value ? this.trueValue : this.falseValue;\n  }\n\n  public setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  public registerOnChange(fn: (_: any) => {}): void {\n    this.onChange = fn;\n  }\n\n  public registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[btnCheckbox]', providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'btnCheckboxTrue': [{ type: Input },],\n'btnCheckboxFalse': [{ type: Input },],\n'state': [{ type: HostBinding, args: ['class.active', ] },],\n'onClick': [{ type: HostListener, args: ['click', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}