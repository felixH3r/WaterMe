{"version":3,"file":"tooltip-container.component.js","sources":["../../src/tooltip/tooltip-container.component.ts"],"names":[],"mappings":"OAAO,EACU,SAAS,EAAE,uBAAuB,EAClD,MAAM,eAAe;AACtB,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB;AAChD,OAAO,EAAE,KAAK,EAAE,MAAM,+BAA+B;;;;;AAGrD;AAAsD,IAUpD,mCAAmB,MAAqB;AAC1C,QAAI,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAChC,IAAE,CAAC;AACH,IAPE,sBAAW,4CAAK;AAAI,aAApB;AAAc,YACZ,MAAM,CAAC,KAAK,EAAE,CAAC;AACnB,QAAE,CAAC;AAEH;AAA0B;AACnB,OAHJ;AACH,IAKS,mDAAe,GAAtB;AAAc,QACZ,IAAI,CAAC,QAAQ,GAAG,EAAC,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC;AAC7C,QAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;AACzC,QAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;AACtD,QACI,IAAI,CAAC,QAAQ,CAAC,EAAE,GAAG,IAAI,CAAC;AAC5B,QAAI,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;AACzB,YAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;AAChC,QAAI,CAAC;AACL,QACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;AAC1B,YAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;AAC5C,QAAI,CAAC;AACL,IAAE,CAAC,CAmCD;IAlCK,JAmCP,IAAA,kBAAkB;iBAnCD,GAA0B,UAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,xDAmC1B,IAAO,wCAAc,GAAmE,cAAM,OAAA;QAlC5F,QAAQ,EAAE,lBAmCZ,QAAA,EAAC,IAAI,EAAE,aAAa,GAAG;MAnCW,NAoClC,KAAC,EAF6F,CAE7F;kBAnCC,eAAe,EAAE,uBAAuB,CAAC,MAAM,sBAC/C,2BAA2B,qBAC3B,IAAI,EAAE,0BACJ,SAAS;CAAE,qDAAqD,0BAChE,cAAc,EAAE,QAAQ,0BACxB,IAAI,EAAE,SAAS,sBAChB,sBACD,QAAQ,EAAE;kDAGP,kBAoBJ,EAAG,EAAE,OACL;;;;;;;;;;;;;;;;;;;;;;8EAIC;AACF,IAAA,gCAAC;AAAD,CAAC,AAnED,IAmEC;AACD","sourcesContent":["import {\n  AfterViewInit, Component, ChangeDetectionStrategy, Inject\n} from '@angular/core';\nimport { TooltipConfig } from './tooltip.config';\nimport { isBs3 } from '../utils/ng2-bootstrap-config';\n\n\nexport class TooltipContainerComponent implements AfterViewInit {\n  public classMap: any;\n  public placement: string;\n  public popupClass: string;\n  public animation: boolean;\n\n  public get isBs3(): boolean {\n    return isBs3();\n  }\n\n  public constructor(config: TooltipConfig) {\n    Object.assign(this, config);\n  }\n\n  public ngAfterViewInit(): void {\n    this.classMap = {in: false, fade: false};\n    this.classMap[this.placement] = true;\n    this.classMap['tooltip-' + this.placement] = true;\n\n    this.classMap.in = true;\n    if (this.animation) {\n      this.classMap.fade = true;\n    }\n\n    if (this.popupClass) {\n      this.classMap[this.popupClass] = true;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'bs-tooltip-container',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // tslint:disable-next-line\n  host: {\n    '[class]': '\"tooltip in tooltip-\" + placement + \" \" + placement',\n    '[class.show]': '!isBs3',\n    role: 'tooltip'\n  },\n  template: `\n    <div class=\"tooltip-arrow\"></div>\n    <div class=\"tooltip-inner\"><ng-content></ng-content></div>\n    `\n  // template: `<div class=\"tooltip\" role=\"tooltip\"\n  //    [ngStyle]=\"{top: top, left: left, display: display}\"\n  //    [ngClass]=\"classMap\">\n  //     <div class=\"tooltip-arrow\"></div>\n  //     <div class=\"tooltip-inner\"\n  //          *ngIf=\"htmlContent && !isTemplate\"\n  //          innerHtml=\"{{htmlContent}}\">\n  //     </div>\n  //     <div class=\"tooltip-inner\"\n  //          *ngIf=\"htmlContent && isTemplate\">\n  //       <template [ngTemplateOutlet]=\"htmlContent\"\n  //                 [ngOutletContext]=\"{model: context}\">\n  //       </template>\n  //     </div>\n  //     <div class=\"tooltip-inner\"\n  //          *ngIf=\"content\">\n  //       {{content}}\n  //     </div>\n  //   </div>`\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TooltipConfig, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}