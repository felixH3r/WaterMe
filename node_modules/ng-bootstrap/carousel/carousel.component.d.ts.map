{"version":3,"file":"carousel.component.d.ts","sources":["carousel.component.d.ts"],"names":[],"mappingssourcesContent":["/***\n * pause (not yet supported) (?string='hover') - event group name which pauses the cycling of the carousel, if hover pauses on mouseenter and resumes on mouseleave\n keyboard (not yet supported) (?boolean=true) - if false carousel will not react to keyboard events\n note: swiping not yet supported\n */\n/****\n * Problems:\n * 1) if we set an active slide via model changes, .active class remains on a current slide.\n * 2) if we have only one slide, we shouldn't show prev/next nav buttons\n * 3) if first or last slide is active and noWrap is true, there should be \"disabled\" class on the nav buttons.\n * 4) default interval should be equal 5000\n */\nimport { OnDestroy, EventEmitter } from '@angular/core';\nimport { LinkedList } from '../utils';\nimport { SlideComponent } from './slide.component';\nimport { CarouselConfig } from './carousel.config';\nexport declare enum Direction {\n    UNKNOWN = 0,\n    NEXT = 1,\n    PREV = 2,\n}\n/**\n * Base element to create carousel\n */\nexport declare class CarouselComponent implements OnDestroy {\n    /** If `true` — carousel will not cycle continuously and will have hard stops (prevent looping) */\n    noWrap: boolean;\n    /**  If `true` — will disable pausing on carousel mouse hover */\n    noPause: boolean;\n    protected _currentActiveSlide: number;\n    /** Will be emitted when active slide has been changed. Part of two-way-bindable [(activeSlide)] property */\n    activeSlideChange: EventEmitter<any>;\n    /** Index of currently displayed slide(started for 0) */\n    activeSlide: number;\n    protected _interval: number;\n    /**\n     * Delay of item cycling in milliseconds. If false, carousel won't cycle automatically.\n     */\n    interval: number;\n    protected _slides: LinkedList<SlideComponent>;\n    readonly slides: SlideComponent[];\n    protected currentInterval: any;\n    protected isPlaying: boolean;\n    protected destroyed: boolean;\n    readonly isBs4: boolean;\n    constructor(config: CarouselConfig);\n    ngOnDestroy(): void;\n    /**\n     * Adds new slide. If this slide is first in collection - set it as active and starts auto changing\n     * @param slide\n     */\n    addSlide(slide: SlideComponent): void;\n    /**\n     * Removes specified slide. If this slide is active - will roll to another slide\n     * @param slide\n     */\n    removeSlide(slide: SlideComponent): void;\n    /**\n     * Rolling to next slide\n     * @param force: {boolean} if true - will ignore noWrap flag\n     */\n    nextSlide(force?: boolean): void;\n    /**\n     * Rolling to previous slide\n     * @param force: {boolean} if true - will ignore noWrap flag\n     */\n    previousSlide(force?: boolean): void;\n    /**\n     * Rolling to specified slide\n     * @param index: {number} index of slide, which must be shown\n     */\n    selectSlide(index: number): void;\n    /**\n     * Starts a auto changing of slides\n     */\n    play(): void;\n    /**\n     * Stops a auto changing of slides\n     */\n    pause(): void;\n    /**\n     * Finds and returns index of currently displayed slide\n     * @returns {number}\n     */\n    getCurrentSlideIndex(): number;\n    /**\n     * Defines, whether the specified index is last in collection\n     * @param index\n     * @returns {boolean}\n     */\n    isLast(index: number): boolean;\n    /**\n     * Defines next slide index, depending of direction\n     * @param direction: Direction(UNKNOWN|PREV|NEXT)\n     * @param force: {boolean} if TRUE - will ignore noWrap flag, else will return undefined if next slide require wrapping\n     * @returns {any}\n     */\n    private findNextSlideIndex(direction, force);\n    /**\n     * Sets a slide, which specified through index, as active\n     * @param index\n     * @private\n     */\n    private _select(index);\n    /**\n     * Starts loop of auto changing of slides\n     */\n    private restartTimer();\n    /**\n     * Stops loop of auto changing of slides\n     */\n    private resetTimer();\n}\n"]}